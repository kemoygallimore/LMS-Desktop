//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LMS_Desktop
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LeaveManagementSystemEntities4 : DbContext
    {
        public LeaveManagementSystemEntities4()
            : base("name=LeaveManagementSystemEntities4")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CancelationReasons> CancelationReasons { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<LeaveStatus> LeaveStatus { get; set; }
        public virtual DbSet<LeaveSubmissionTable> LeaveSubmissionTable { get; set; }
        public virtual DbSet<LeaveTypes> LeaveTypes { get; set; }
        public virtual DbSet<Roletest> Roletest { get; set; }
        public virtual DbSet<RoleTypes> RoleTypes { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<ViewAll> ViewAll { get; set; }
        public virtual DbSet<ViewEmployees> ViewEmployees { get; set; }
    
        public virtual int FilterbyAllFields(string empID, string type, string status, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FilterbyAllFields", empIDParameter, typeParameter, statusParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int InsertLeaveRequest(Nullable<int> empid, Nullable<System.DateTime> submissionDate, Nullable<int> leaveTypeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> totalDays, string comments)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("Empid", empid) :
                new ObjectParameter("Empid", typeof(int));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("LeaveTypeId", leaveTypeId) :
                new ObjectParameter("LeaveTypeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var totalDaysParameter = totalDays.HasValue ?
                new ObjectParameter("TotalDays", totalDays) :
                new ObjectParameter("TotalDays", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLeaveRequest", empidParameter, submissionDateParameter, leaveTypeIdParameter, startDateParameter, endDateParameter, totalDaysParameter, commentsParameter);
        }
    
        public virtual int UpdateLeaveStatus(Nullable<int> leaveID, Nullable<int> newStatus)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(int));
    
            var newStatusParameter = newStatus.HasValue ?
                new ObjectParameter("NewStatus", newStatus) :
                new ObjectParameter("NewStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLeaveStatus", leaveIDParameter, newStatusParameter);
        }
    
        public virtual int UpdateRoleType(string role, Nullable<int> roleid, string operationType)
        {
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleType", roleParameter, roleidParameter, operationTypeParameter);
        }
    
        public virtual ObjectResult<AllRequests_SP_Result> AllRequests_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllRequests_SP_Result>("AllRequests_SP");
        }
    
        public virtual ObjectResult<Filters_Result> Filters(string empID, string type, string status, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Filters_Result>("Filters", empIDParameter, typeParameter, statusParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<LeaveRequestFilters_Result> LeaveRequestFilters(string type, string staff, string status, Nullable<System.DateTime> submissionDate)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var staffParameter = staff != null ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeaveRequestFilters_Result>("LeaveRequestFilters", typeParameter, staffParameter, statusParameter, submissionDateParameter);
        }
    }
}
